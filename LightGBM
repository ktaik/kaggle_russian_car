{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":94521,"databundleVersionId":11239181,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#import libraries\n\n!pip install --upgrade lightgbm\n!pip install lightgbm optuna\n\nimport os\nimport string\nimport numpy as np\nimport pandas as pd\nimport optuna\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T08:32:29.762460Z","iopub.execute_input":"2025-05-07T08:32:29.763224Z","iopub.status.idle":"2025-05-07T08:32:33.247713Z","shell.execute_reply.started":"2025-05-07T08:32:29.763138Z","shell.execute_reply":"2025-05-07T08:32:33.246213Z"},"_kg_hide-input":false,"_kg_hide-output":true},"outputs":[{"name":"stdout","text":"Requirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.6.0)\nRequirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.26.4)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.13.1)\nRequirement already satisfied: mkl_fft in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.0->lightgbm) (1.3.8)\nRequirement already satisfied: mkl_random in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.0->lightgbm) (1.2.4)\nRequirement already satisfied: mkl_umath in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.0->lightgbm) (0.1.1)\nRequirement already satisfied: mkl in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.0->lightgbm) (2025.0.1)\nRequirement already satisfied: tbb4py in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.0->lightgbm) (2022.0.0)\nRequirement already satisfied: mkl-service in /usr/local/lib/python3.10/dist-packages (from numpy>=1.17.0->lightgbm) (2.4.1)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17.0->lightgbm) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17.0->lightgbm) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.17.0->lightgbm) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.17.0->lightgbm) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.17.0->lightgbm) (2024.2.0)\n^C\n\u001b[31mERROR: Operation cancelled by user\u001b[0m\u001b[31m\n\u001b[0mRequirement already satisfied: lightgbm in /usr/local/lib/python3.10/dist-packages (4.6.0)\nRequirement already satisfied: optuna in /usr/local/lib/python3.10/dist-packages (4.2.1)\nRequirement already satisfied: numpy>=1.17.0 in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.26.4)\nRequirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from lightgbm) (1.13.1)\nRequirement already satisfied: alembic>=1.5.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (1.14.1)\nRequirement already satisfied: colorlog in /usr/local/lib/python3.10/dist-packages (from optuna) (6.9.0)\nRequirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from optuna) (24.2)\nRequirement already satisfied: sqlalchemy>=1.4.2 in /usr/local/lib/python3.10/dist-packages (from optuna) (2.0.36)\nRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from optuna) (4.67.1)\nRequirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from optuna) (6.0.2)\nRequirement already satisfied: Mako in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (1.3.9)\nRequirement already satisfied: typing-extensions>=4 in /usr/local/lib/python3.10/dist-packages (from alembic>=1.5.0->optuna) (4.12.2)\nRequirement already satisfied: greenlet!=0.4.17 in /usr/local/lib/python3.10/dist-packages (from sqlalchemy>=1.4.2->optuna) (3.1.1)\nRequirement already satisfied: MarkupSafe>=0.9.2 in /usr/local/lib/python3.10/dist-packages (from Mako->alembic>=1.5.0->optuna) (3.0.2)\nRequirement already satisfied: intel-openmp>=2024 in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17.0->lightgbm) (2024.2.0)\nRequirement already satisfied: tbb==2022.* in /usr/local/lib/python3.10/dist-packages (from mkl->numpy>=1.17.0->lightgbm) (2022.0.0)\nRequirement already satisfied: tcmlib==1.* in /usr/local/lib/python3.10/dist-packages (from tbb==2022.*->mkl->numpy>=1.17.0->lightgbm) (1.2.0)\nRequirement already satisfied: intel-cmplr-lib-rt in /usr/local/lib/python3.10/dist-packages (from mkl_umath->numpy>=1.17.0->lightgbm) (2024.2.0)\nRequirement already satisfied: intel-cmplr-lib-ur==2024.2.0 in /usr/local/lib/python3.10/dist-packages (from intel-openmp>=2024->mkl->numpy>=1.17.0->lightgbm) (2024.2.0)\n^C\n\u001b[31mERROR: Operation cancelled by user\u001b[0m\u001b[31m\n\u001b[0m","output_type":"stream"}],"execution_count":35},{"cell_type":"markdown","source":"# How the plate looks like?","metadata":{"execution":{"iopub.status.busy":"2025-03-18T04:19:13.330376Z","iopub.status.idle":"2025-03-18T04:19:13.330848Z","shell.execute_reply":"2025-03-18T04:19:13.33065Z"}}},{"cell_type":"markdown","source":"The plate consists of series and number, where the last two or three digits are the region code. Courtesy from [Skoda-storyboard](https://www.skoda-storyboard.com/en/models/deciphering-number-plates-russia/).\n![image](https://cdn.skoda-storyboard.com/2019/04/Russian-license-plate-english.jpg#?s_aid=bd5wemcb-uz36-l03s-yigd-6qaeks5bqrk7_004_1)","metadata":{}},{"cell_type":"code","source":"#feature extraction\n\nfrom supplemental_english import *  # REGION_CODES, GOVERNMENT_CODES\n\nVIP_NUMBERS = {\"001\", \"002\", \"003\", \"007\", \"100\", \"200\", \"300\", \"400\", \"600\", \"700\", \"800\", \"900\", \"911\"}\nSEQUENTIAL_NUMBERS = {\n    \"123\", \"234\", \"345\", \"456\", \"567\", \"678\", \"789\",\n    \"321\", \"432\", \"543\", \"654\", \"765\", \"876\", \"987\"\n}\nRANDOM_STATE = 42\n\ndef smape(y_true, y_pred):\n    y_pred = np.exp(y_pred)  \n    y_true = np.exp(y_true) \n    return np.mean(2 * np.abs(y_pred - y_true) / (np.abs(y_true) + np.abs(y_pred) + 1e-8)) * 100\n\ndef find_importance_values_for_plate(plate, gov_codes):\n    letters = plate[0] + plate[4:6]\n    numbers = int(plate[1:4])\n    region_code = plate[6:]\n    for (code_letters, num_range, region), details in gov_codes.items():\n        if letters == code_letters and region_code == region:\n            if num_range[0] <= numbers <= num_range[1]:\n                return details[2], details[3]\n    return 0, 0","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T08:32:33.250427Z","iopub.execute_input":"2025-05-07T08:32:33.250814Z","iopub.status.idle":"2025-05-07T08:32:33.262847Z","shell.execute_reply.started":"2025-05-07T08:32:33.250779Z","shell.execute_reply":"2025-05-07T08:32:33.261660Z"}},"outputs":[],"execution_count":36},{"cell_type":"markdown","source":"# Pre-process data","metadata":{}},{"cell_type":"code","source":"#preprocess\n\ndef get_region_code(plate):\n    region_code = str(int(plate[6:]))\n    for region, codes in REGION_CODES.items():\n        if region_code in codes:\n            return region\n    return \"Unknown\"\n\ndef is_zoro(num_str): return int(len(set(num_str)) == 1)\ndef is_vip(num_str): return int(num_str in VIP_NUMBERS)\ndef is_seq(num_str): return int(num_str in SEQUENTIAL_NUMBERS)\n\ndef process_data(df, region_price_dict, is_train=True):\n    \n    df[\"date\"] = pd.to_datetime(df[\"date\"])\n    df[\"year\"] = df[\"date\"].dt.year\n    df[\"month\"] = df[\"date\"].dt.month\n    df[\"day\"] = df[\"date\"].dt.day\n    df[\"weekday\"] = df[\"date\"].dt.weekday\n    df.drop(columns=[\"date\", \"id\"], inplace=True)\n\n    df[\"plate\"] = df[\"plate\"].apply(lambda x: x if len(x) == 9 else f\"{x[:6]}0{x[6:]}\")\n    df[\"region_name\"] = df[\"plate\"].apply(get_region_code)\n    df[\"plate_number\"] = df[\"plate\"].str[1:4]\n    df[\"plate_series\"] = df[\"plate\"].str[0] + df[\"plate\"].str[4:6]\n    df[\"plate_region\"] = df[\"plate\"].str[6:]\n    df[\"is_zoro\"] = df[\"plate_number\"].apply(is_zoro)\n    df[\"is_vip\"] = df[\"plate_number\"].apply(is_vip)\n    df[\"is_seq\"] = df[\"plate_number\"].apply(is_seq)\n\n    # 政府プレートの特徴\n    df[[\"advantage_on_road\", \"significance\"]] = df.apply(\n        lambda row: pd.Series(find_importance_values_for_plate(row[\"plate\"], GOVERNMENT_CODES)), axis=1\n    )\n\n    df.drop(columns=[\"plate\"], inplace=True)\n    df[\"region_avg_price\"] = df[\"region_name\"].map(region_price_dict)\n\n    if is_train:\n        df[\"price\"] = np.log1p(df[\"price\"])\n    df[\"region_avg_price\"] = np.log1p(df[\"region_avg_price\"])\n    return df\n\ntrain_path = \"/kaggle/input/russian-car-plates-prices-prediction/train.csv\"\ntest_path = \"/kaggle/input/russian-car-plates-prices-prediction/test.csv\"\n\ndf_raw = pd.read_csv(train_path)\ndf_raw[\"region_code\"] = df_raw[\"plate\"].apply(get_region_code)\ndf_raw[\"region_avg_price\"] = df_raw.groupby(\"region_code\")[\"price\"].transform(\"mean\")\nregion_avg_price_dict = df_raw.groupby(\"region_code\")[\"region_avg_price\"].first().to_dict()\n\ntrain_df = process_data(pd.read_csv(train_path), region_avg_price_dict)\ntest_df_raw = pd.read_csv(test_path)\ntest_ids = test_df_raw[\"id\"]\ntest_df = process_data(test_df_raw, region_avg_price_dict, is_train=False)\n\n# ダミー変換\nX = pd.get_dummies(train_df.drop(columns=[\"price\"]))\ny = train_df[\"price\"]\nX_test = pd.get_dummies(test_df)\nX_test = X_test.reindex(columns=X.columns, fill_value=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T08:32:33.264848Z","iopub.execute_input":"2025-05-07T08:32:33.265206Z","iopub.status.idle":"2025-05-07T08:32:45.406181Z","shell.execute_reply.started":"2025-05-07T08:32:33.265174Z","shell.execute_reply":"2025-05-07T08:32:45.405117Z"}},"outputs":[],"execution_count":37},{"cell_type":"code","source":"#train\n\ndef objective(trial):\n    params = {\n        'objective': 'regression',\n        'metric': 'mae',\n        'boosting_type': 'gbdt',\n        'learning_rate': trial.suggest_float('learning_rate', 0.01, 0.1),\n        'num_leaves': trial.suggest_int('num_leaves', 31, 128),\n        'max_depth': trial.suggest_int('max_depth', 5, 12),\n        'min_data_in_leaf': trial.suggest_int('min_data_in_leaf', 10, 100),\n        'feature_fraction': trial.suggest_float('feature_fraction', 0.6, 1.0),\n        'bagging_fraction': trial.suggest_float('bagging_fraction', 0.6, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 10),\n        'verbosity': -1,\n        'random_state': RANDOM_STATE\n    }\n\n    smape_scores = []\n    kf = KFold(n_splits=3, shuffle=True, random_state=RANDOM_STATE)\n    for train_idx, val_idx in kf.split(X):\n        X_tr, X_val = X.iloc[train_idx], X.iloc[val_idx]\n        y_tr, y_val = y.iloc[train_idx], y.iloc[val_idx]\n\n        train_data = lgb.Dataset(X_tr, label=y_tr)\n        val_data = lgb.Dataset(X_val, label=y_val)\n\n        model = lgb.train(\n            params,\n            train_set=train_data,\n            valid_sets=[val_data],\n            num_boost_round=10000,\n            callbacks=[\n                lgb.early_stopping(stopping_rounds=10, verbose=True),\n                lgb.log_evaluation(period=100)\n            ]\n        )\n\n        val_pred = model.predict(X_val)\n        smape_scores.append(smape(y_val, val_pred))\n\n    return np.mean(smape_scores)\n\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=25)\nprint(\"Best params:\", study.best_trial.params)\n\n# --- 最適パラメータで KFold 再学習＆予測 ---\nbest_params = study.best_trial.params\nbest_params.update({\n    'objective': 'regression',\n    'metric': 'mae',\n    'boosting_type': 'gbdt',\n    'verbosity': -1,\n    'random_state': RANDOM_STATE\n})\n\nkf = KFold(n_splits=5, shuffle=True, random_state=RANDOM_STATE)\noof_preds = np.zeros(len(X))\ntest_preds = np.zeros(len(X_test))\n\nfor fold, (train_idx, val_idx) in enumerate(kf.split(X)):\n    print(f\"🔁 Fold {fold+1}\")\n    X_tr, X_val = X.iloc[train_idx], X.iloc[val_idx]\n    y_tr, y_val = y.iloc[train_idx], y.iloc[val_idx]\n\n    train_data = lgb.Dataset(X_tr, label=y_tr)\n    val_data = lgb.Dataset(X_val, label=y_val)\n\n    model = lgb.train(\n        best_params,\n        train_set=train_data,\n        valid_sets=[val_data],\n        num_boost_round=10000,\n        callbacks=[\n            lgb.early_stopping(stopping_rounds=50),\n            lgb.log_evaluation(100)\n        ]\n    )\n\n    oof_preds[val_idx] = model.predict(X_val)\n    test_preds += model.predict(X_test) / 5","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-07T08:32:45.407494Z","iopub.execute_input":"2025-05-07T08:32:45.407895Z","execution_failed":"2025-05-07T08:33:26.399Z"}},"outputs":[{"name":"stderr","text":"[I 2025-05-07 08:32:45,418] A new study created in memory with name: no-name-07b89d1c-48b2-4ec7-b970-e255f3761c95\n","output_type":"stream"},{"name":"stdout","text":"Training until validation scores don't improve for 10 rounds\n[100]\tvalid_0's l1: 0.549673\n[200]\tvalid_0's l1: 0.516731\n[300]\tvalid_0's l1: 0.502773\n[400]\tvalid_0's l1: 0.495493\n[500]\tvalid_0's l1: 0.491265\n[600]\tvalid_0's l1: 0.488232\n[700]\tvalid_0's l1: 0.486198\n[800]\tvalid_0's l1: 0.484723\n[900]\tvalid_0's l1: 0.483915\n[1000]\tvalid_0's l1: 0.483\nEarly stopping, best iteration is:\n[1006]\tvalid_0's l1: 0.48297\nTraining until validation scores don't improve for 10 rounds\n[100]\tvalid_0's l1: 0.546823\n[200]\tvalid_0's l1: 0.51376\n[300]\tvalid_0's l1: 0.50038\n[400]\tvalid_0's l1: 0.492925\n[500]\tvalid_0's l1: 0.488352\n[600]\tvalid_0's l1: 0.485477\n[700]\tvalid_0's l1: 0.4829\n[800]\tvalid_0's l1: 0.481347\nEarly stopping, best iteration is:\n[883]\tvalid_0's l1: 0.480105\nTraining until validation scores don't improve for 10 rounds\n[100]\tvalid_0's l1: 0.542564\n[200]\tvalid_0's l1: 0.509314\n[300]\tvalid_0's l1: 0.495433\n[400]\tvalid_0's l1: 0.487859\n[500]\tvalid_0's l1: 0.483108\n[600]\tvalid_0's l1: 0.480042\n[700]\tvalid_0's l1: 0.477787\n[800]\tvalid_0's l1: 0.476156\n[900]\tvalid_0's l1: 0.475106\nEarly stopping, best iteration is:\n[916]\tvalid_0's l1: 0.474964\n","output_type":"stream"},{"name":"stderr","text":"[I 2025-05-07 08:33:04,987] Trial 0 finished with value: 44.01459185835801 and parameters: {'learning_rate': 0.04398084594491236, 'num_leaves': 96, 'max_depth': 8, 'min_data_in_leaf': 58, 'feature_fraction': 0.8820674729410283, 'bagging_fraction': 0.6113435959669672, 'bagging_freq': 1}. Best is trial 0 with value: 44.01459185835801.\n","output_type":"stream"},{"name":"stdout","text":"Training until validation scores don't improve for 10 rounds\n[100]\tvalid_0's l1: 0.495025\n[200]\tvalid_0's l1: 0.472956\n[300]\tvalid_0's l1: 0.463352\n[400]\tvalid_0's l1: 0.458048\n[500]\tvalid_0's l1: 0.453802\n[600]\tvalid_0's l1: 0.451559\nEarly stopping, best iteration is:\n[666]\tvalid_0's l1: 0.45026\nTraining until validation scores don't improve for 10 rounds\n[100]\tvalid_0's l1: 0.493182\n[200]\tvalid_0's l1: 0.470396\n[300]\tvalid_0's l1: 0.460353\n[400]\tvalid_0's l1: 0.455084\n[500]\tvalid_0's l1: 0.451394\n[600]\tvalid_0's l1: 0.448616\nEarly stopping, best iteration is:\n[647]\tvalid_0's l1: 0.4474\n","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"#prediction\n\nfinal_smape = smape(y, oof_preds)\nprint(f\"✅ OOF SMAPE: {final_smape:.4f}\")\n\nsubmission = pd.DataFrame({\n    \"id\": test_ids,\n    \"price\": np.round(np.expm1(test_preds))\n})\nsubmission.to_csv(\"submission.csv\", index=False)\nprint(\"✅ submission.csv を保存しました\")","metadata":{"trusted":true,"execution":{"execution_failed":"2025-05-07T08:33:26.400Z"}},"outputs":[],"execution_count":null}]}